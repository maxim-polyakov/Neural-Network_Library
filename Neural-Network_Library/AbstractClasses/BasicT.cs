using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Neural_Network_Library
{
    [Serializable]
    public abstract class BasicT : IT
    {
        /// <summary>
        /// The G algorithm.
        /// </summary>
        [NonSerialized]
        private GAlgorithm _ga;

        /// <summary>
        /// The Qs for this gene.
        /// </summary>
        ///
        private readonly IList<Q> _Qs;

        /// <summary>
        /// The adjusted score.
        /// </summary>
        ///
        private double _adjustedScore;

        /// <summary>
        /// The amount to spawn.
        /// </summary>
        ///
        private double _amountToSpawn;

        /// <summary>
        /// The T id.
        /// </summary>
        ///
        private long _TID;

        /// <summary>
        /// The organism generated by this gene.
        /// </summary>
        ///
        [NonSerialized]
        private Object _organism;

        /// <summary>
        /// The population this T belongs to.
        /// </summary>
        ///
        private IPopulation _population;

        /// <summary>
        /// The score of this T.
        /// </summary>
        ///
        private double _score;

        /// <summary>
        /// Construct the bo
        /// </summary>
        protected BasicT()
        {
            _Qs = new List<Q>();
            _score = 0;
        }

        #region IT Members

        /// <returns>The number of genes in this T.</returns>
        public int CalculateGeneCount()
        {
            // sum the genes in the Qs.
            return _Qs.Sum(Q => Q.Genes.Count);
        }

        /// <inheritDoc/>
        public bool Equals(IT other)
        {
            if (other == this)
            {
                return true;
            }

            return Math.Abs(other.Score - Score) < SyntFramework.DefaultDoubleEqual;
        }

        /// <inheritDoc/>
        public int CompareTo(IT other)
        {
            // might be null when deserializing
            if (_ga == null)
            {
                return 0;
            }

            if (Equals(other))
            {
                return 0;
            }

            // compare
            if (_ga.CalculateScore.ShouldMinimize)
            {
                if (Math.Abs(Score - other.Score) < SyntFramework.DefaultDoubleEqual)
                {
                    return 0;
                }
                if (Score > other.Score)
                {
                    return 1;
                }
                return -1;
            }
            if (Math.Abs(Score - other.Score) < SyntFramework.DefaultDoubleEqual)
            {
                return 0;
            }
            if (Score > other.Score)
            {
                return -1;
            }
            return 1;
        }

        /// <summary>
        /// Set the adjusted score.
        /// </summary>
        ///
        /// <value>The score.</value>
        public double AdjustedScore
        {
            get { return _adjustedScore; }
            set { _adjustedScore = value; }
        }


        /// <summary>
        /// Set the amount to spawn.
        /// </summary>
        public double AmountToSpawn
        {
            get { return _amountToSpawn; }
            set { _amountToSpawn = value; }
        }


        /// <value>The number of Qs.</value>
        public IList<Q> Qs
        {
            get { return _Qs; }
        }


        /// <summary>
        /// Set the G algorithm to use.
        /// </summary>
        public GAlgorithm GA
        {
            get { return _ga; }
            set { _ga = value; }
        }


        /// <summary>
        /// Set the T id.
        /// </summary>
        public long TID
        {
            get { return _TID; }
            set { _TID = value; }
        }


        /// <summary>
        /// Set the organism.
        /// </summary>
        public Object Organism
        {
            get { return _organism; }
            set { _organism = value; }
        }


        /// <value>the population to set</value>
        public IPopulation Population
        {
            get { return _population; }
            set { _population = value; }
        }


        /// <summary>
        /// Set the score.
        /// </summary>
        public double Score
        {
            get { return _score; }
            set { _score = value; }
        }


        /// <summary>
        /// Mate two Ts. Will loop over all Qs.
        /// </summary>
        ///
        /// <param name="father">The father.</param>
        /// <param name="child1">The first child.</param>
        /// <param name="child2">The second child.</param>
        public void Mate(IT father, IT child1,
                         IT child2)
        {
            int motherQs = Qs.Count;
            int fatherQs = father.Qs.Count;

            if (motherQs != fatherQs)
            {

            }

            for (int i = 0; i < fatherQs; i++)
            {
                Q motherQ = _Qs[i];
                Q fatherQ = father.Qs[i];
                Q offspring1Q = child1.Qs[i];
                Q offspring2Q = child2.Qs[i];

                _ga.Crossover.Mate(motherQ,
                                                fatherQ, offspring1Q,
                                                offspring2Q);

                if (ThreadSafeRandom.NextDouble() < _ga.MutationPercent)
                {
                    _ga.Mutate.PerformMutation(
                        offspring1Q);
                }

                if (ThreadSafeRandom.NextDouble() < _ga.MutationPercent)
                {
                    _ga.Mutate.PerformMutation(
                        offspring2Q);
                }
            }

            child1.Decode();
            child2.Decode();
            _ga.PerformCalculateScore(child1);
            _ga.PerformCalculateScore(child2);
        }

        /// <summary>
        /// from Synt.ml.G.T.T
        /// </summary>
        ///
        public abstract void Decode();

        /// <summary>
        /// from Synt.ml.G.T.T
        /// </summary>
        ///
        public abstract void Syntesis();

        #endregion

        /// <inheritdoc />
        public override sealed String ToString()
        {
            var builder = new StringBuilder();
            builder.Append("[");
            builder.Append(GetType().Name);
            builder.Append(": score=");
            builder.Append(Score);
            return builder.ToString();
        }
    }
}
